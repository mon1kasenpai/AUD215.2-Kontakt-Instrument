on init 

	{General UI Constants}
	declare const $UI_HEIGHT := 350
	declare const $UI_WIDTH := 634
	declare const $Y_OFFSET := 0
	declare const $X_OFFSET := 0
	declare const $UI_COLOUR_HEX := 934d8ddh  {Change this to the 6 character hex number of your chosen colour and leave the 9 at the start and h at the end (eg. 9<hex_code>h).}

	declare $KILLSWITCH_USED

	declare $i
	declare $i2

   	declare ui_slider $GroupOneVol(0, 700000)
   	make_persistent($GroupOneVol)
   	declare $GroupOneVolId
   	$GroupOneVolId := get_ui_id($GroupOneVol)
	set_control_par_str($GroupOneVolId, $CONTROL_PAR_PICTURE, "HoriSlider_256")
	set_control_par_str($GroupOneVol, $CONTROL_PAR_MOUSE_BEHAVIOUR, 1000)
	move_control_px($GroupOneVol,100,47)

   	declare ui_slider $GroupTwoVol(0, 700000)
   	make_persistent($GroupTwoVol)
   	declare $GroupTwoVolId
	$GroupTwoVolId := get_ui_id($GroupTwoVol)
	set_control_par_str($GroupTwoVolId, $CONTROL_PAR_PICTURE, "HoriSlider_256")
	set_control_par_str($GroupTwoVol, $CONTROL_PAR_MOUSE_BEHAVIOUR, 1000)
	move_control_px($GroupTwoVol,100,88)

	declare ui_slider $GroupThreeVol(0, 700000)
   	make_persistent($GroupThreeVol)
   	declare $GroupThreeVolId
	$GroupThreeVolId := get_ui_id($GroupThreeVol)
	set_control_par_str($GroupThreeVolId, $CONTROL_PAR_PICTURE, "HoriSlider_256")
	set_control_par_str($GroupThreeVol, $CONTROL_PAR_MOUSE_BEHAVIOUR, 1000)
	move_control_px($GroupThreeVol,100,128)

	declare ui_slider $GroupFourVol(0, 700000)
   	make_persistent($GroupFourVol)
   	declare $GroupFourVolId
	$GroupFourVolId := get_ui_id($GroupFourVol)
	set_control_par_str($GroupFourVolId, $CONTROL_PAR_PICTURE, "HoriSlider_256")
	set_control_par_str($GroupFourVol, $CONTROL_PAR_MOUSE_BEHAVIOUR, 1000)
	move_control_px($GroupFourVol,100,168)

	declare ui_slider $GroupFiveVol(0, 700000)
   	make_persistent($GroupFiveVol)
   	declare $GroupFiveVolId
	$GroupFiveVolId := get_ui_id($GroupFiveVol)
	set_control_par_str($GroupFiveVolId, $CONTROL_PAR_PICTURE, "HoriSlider_256")
	set_control_par_str($GroupFiveVol, $CONTROL_PAR_MOUSE_BEHAVIOUR, 1000)
	move_control_px($GroupFiveVol,100,210)

	declare ui_slider $GroupSixVol(0, 700000)
   	make_persistent($GroupSixVol)
   	declare $GroupSixVolId
	$GroupSixVolId := get_ui_id($GroupSixVol)
	set_control_par_str($GroupSixVolId, $CONTROL_PAR_PICTURE, "HoriSlider_256")
	set_control_par_str($GroupSixVol, $CONTROL_PAR_MOUSE_BEHAVIOUR, 1000)
	move_control_px($GroupSixVol,100,256)

	declare ui_button $GroupOneBypass
	set_text($GroupOneBypass, "Mute Group 1")
   	make_persistent($GroupOneBypass)
   	declare $GroupOneBypassId
   	$GroupOneBypassId := get_ui_id($GroupOneBypass)
	set_control_par($GroupOneBypassId, $CONTROL_PAR_TEXT_ALIGNMENT, 1)
	move_control_px($GroupOneBypass,17,90)

	declare ui_button $GroupTwoBypass
	set_text($GroupTwoBypass, "Mute Group 2")
   	make_persistent($GroupTwoBypass)
   	declare $GroupTwoBypassId
	$GroupTwoBypassId := get_ui_id($GroupTwoBypass)
	set_control_par($GroupTwoBypassId, $CONTROL_PAR_TEXT_ALIGNMENT, 1)
	move_control_px($GroupTwoBypass,17,130)

	declare ui_button $GroupThreeBypass
	set_text($GroupThreeBypass, "Mute Group 3")
   	make_persistent($GroupThreeBypass)
   	declare $GroupThreeBypassId
	$GroupThreeBypassId := get_ui_id($GroupThreeBypass)
	set_control_par($GroupThreeBypassId, $CONTROL_PAR_TEXT_ALIGNMENT, 1)
	move_control_px($GroupThreeBypass,17,169)

	declare ui_button $GroupFourBypass
	set_text($GroupFourBypass, "Mute Group 4")
   	make_persistent($GroupFourBypass)
   	declare $GroupFourBypassId
	$GroupFourBypassId := get_ui_id($GroupFourBypass)
	set_control_par($GroupFourBypassId, $CONTROL_PAR_TEXT_ALIGNMENT, 1)
	move_control_px($GroupFourBypass,17,212)

	declare ui_button $GroupFiveBypass
	set_text($GroupFiveBypass, "Mute Group 5")
   	make_persistent($GroupFiveBypass)
   	declare $GroupFiveBypassId
	$GroupFiveBypassId := get_ui_id($GroupFiveBypass)
	set_control_par($GroupFiveBypassId, $CONTROL_PAR_TEXT_ALIGNMENT, 1)
	move_control_px($GroupfiveBypass,17,255)

	declare ui_button $GroupSixBypass
	set_text($GroupSixBypass, "Mute Group 6")
   	make_persistent($GroupSixBypass)
   	declare $GroupSixBypassId
	$GroupSixBypassId := get_ui_id($GroupSixBypass)
	set_control_par($GroupSixBypassId, $CONTROL_PAR_TEXT_ALIGNMENT, 1)
	move_control_px($GroupSixBypass,17,300)
	
	declare ui_slider $AttKnob(0,1000000)
   make_persistent($AttKnob)
   declare $AttKnobId
   $AttKnobId := get_ui_id($AttKnob)
   set_control_par_str($AttKnobId, $CONTROL_PAR_PICTURE, "CompKnob")
   set_control_par_str($AttKnobId, $CONTROL_PAR_MOUSE_BEHAVIOUR, 1000)
   move_control_px($AttKnob, 190, 160)

   declare ui_slider $DecKnob(0,1000000)
   make_persistent($DecKnob)
   declare $DecKnobId
   $DecKnobId := get_ui_id($DecKnob)
   set_control_par_str($DecKnobId, $CONTROL_PAR_PICTURE, "CompKnob")
	move_control_px($DecKnob, 190,140)

   declare ui_slider $SusKnob(0,1000000)
  	 make_persistent($SusKnob)
   	declare $SusKnobId
  	 $SusKnobId := get_ui_id($SusKnob)
   	set_control_par_str($SusKnobId, $CONTROL_PAR_PICTURE, "CompKnob")
	move_control_px($SusKnob, 190,120)

   declare ui_slider $RelKnob(0,1000000)
   	make_persistent($RelKnob)
   	declare $RelKnobId
   	$RelKnobId := get_ui_id($RelKnob)
   	set_control_par_str($RelKnobId, $CONTROL_PAR_PICTURE, "CompKnob")
   	move_control_px($RelKnob, 190,100)

   declare ui_slider $EqLow(470000, 1100000)
   	make_persistent($EqLow)
   	declare $EqLowId
   	$EqLowId := get_ui_id($EqLow)
   	set_control_par_str($EqLowId, $CONTROL_PAR_PICTURE, "CompKnob")

   
   declare ui_slider $EqMid(470000, 1100000)
   make_persistent($EqMid)
   declare $EqMidId
   $EqMidId := get_ui_id($EqMid)
   set_control_par_str($EqMidId, $CONTROL_PAR_PICTURE, "CompKnob")
   move_control_px($EqMid, 507, 250)


   declare ui_slider $EqHigh(470000, 1100000)
   make_persistent($EqHigh)
   declare $EqHighId
   $EqHighId := get_ui_id($EqHigh)
   set_control_par_str($EqHighId, $CONTROL_PAR_PICTURE, "CompKnob")

   
   declare ui_slider $LP(50000,1000000)
   make_persistent($LP)
   declare $LpId
   $LpId := get_ui_id($LP)
   set_control_par_str($LpId, $CONTROL_PAR_PICTURE, "CompKnob")
   $LP := 1000000

   declare ui_slider $HP(50000,1000000)
   make_persistent($HP)
   declare $HpId
   $HpId := get_ui_id($HP)
   set_control_par_str($HpId, $CONTROL_PAR_PICTURE, "CompKnob")
   $HP := 50000

   declare ui_button $NatureFxBypass
   set_text($NatureFxBypass, "Bypass FX")
   make_persistent($NatureFxBypass)
   declare $NatureFxBypassId
   $NatureFxBypassId := get_ui_id($NatureFxBypass)
   set_control_par($NatureFxBypassId, $CONTROL_PAR_TEXT_ALIGNMENT, 1)
   move_control_px($NatureFxBypass, 485, 320)

	{----Background----}

	make_perfview

   		set_script_title("Group 1: Birds and Trees")

		set_ui_height_px($UI_HEIGHT)
		set_ui_width_px($UI_WIDTH)
		set_ui_color($UI_COLOUR_HEX)

		set_control_par_str ($INST_WALLPAPER_ID, $CONTROL_PAR_PICTURE, "Background")
		set_control_par_str($INST_ICON_ID, $CONTROL_PAR_PICTURE, "NID_instrument_icon")

		set_skin_offset(0)

		$KILLSWITCH_USED := 0

		message("")

	end on

on ui_control($AttKnob)
	
	message("Nature Attack:" & $AttKnob)

	end on

on ui_control($SusKnob)

	message("Nature Sus:" & $SusKnob)

	end on

on ui_control($DecKnob)

	message("Nature dec:" & $DecKnob)

	end on

on ui_control($RelKnob)

	message("nature Rel:" & $RelKnob)

	end on

on ui_control($GroupOneVol)

    set_engine_par($ENGINE_PAR_VOLUME, $GroupOneVol, 0, 0, 0)
	message("modified group: 1 " & $GroupOneVol)

	end on


on ui_control($GroupTwoVol)

    set_engine_par($ENGINE_PAR_VOLUME, $GroupTwoVol, 1, 0, 0)

	end on

on ui_control($GroupThreeVol)
	
	set_engine_par($ENGINE_PAR_VOLUME, $GroupThreeVol, 2, 0, 0)

	end on

on ui_control($GroupFourVol)

	set_engine_par($ENGINE_PAR_VOLUME, $GroupFourVol, 3, 0, 0)

	end on

on ui_control($GroupFiveVol)

	set_engine_par($ENGINE_PAR_VOLUME, $GroupFiveVol, 8, 0, 0)

	end on

on ui_control($GroupSixVol)

	set_engine_par($ENGINE_PAR_VOLUME, $GroupFiveVol, 9, 0, 0)

	end on

on ui_control($AttKnob)

   set_engine_par($ENGINE_PAR_ATTACK, $AttKnob, 0, find_mod(0, "ENV_AHDSR_0"), find_target(0, 0, "ENV_AHDSR_0"))
   set_engine_par($ENGINE_PAR_ATTACK, $AttKnob, 1, find_mod(1, "ENV_AHDSR_0"), find_target(1, 0, "ENV_AHDSR_0"))
   set_engine_par($ENGINE_PAR_ATTACK, $AttKnob, 2, find_mod(2, "ENV_AHDSR_0"), find_target(2, 0, "ENV_AHDSR_0"))
   set_engine_par($ENGINE_PAR_ATTACK, $AttKnob, 3, find_mod(3, "ENV_AHDSR_0"), find_target(3, 0, "ENV_AHDSR_0"))
   set_engine_par($ENGINE_PAR_ATTACK, $AttKnob, 8, find_mod(8, "ENV_AHDSR_0"), find_target(8, 0, "ENV_AHDSR_0"))
   set_engine_par($ENGINE_PAR_ATTACK, $AttKnob, 9, find_mod(9, "ENV_AHDSR_0"), find_target(9, 0, "ENV_AHDSR_0"))

   message( "Nature Attack:" & $AttKnob)

   end on

on ui_control($DecKnob)

   set_engine_par($ENGINE_PAR_DECAY, $DecKnob, 0, find_mod(0, "ENV_AHDSR_0"), find_target(0, 0, "ENV_AHDSR_0"))
   set_engine_par($ENGINE_PAR_DECAY, $DecKnob, 1, find_mod(1, "ENV_AHDSR_0"), find_target(1, 0, "ENV_AHDSR_0"))
   set_engine_par($ENGINE_PAR_DECAY, $DecKnob, 2, find_mod(2, "ENV_AHDSR_0"), find_target(2, 0, "ENV_AHDSR_0"))
   set_engine_par($ENGINE_PAR_DECAY, $DecKnob, 3, find_mod(3, "ENV_AHDSR_0"), find_target(3, 0, "ENV_AHDSR_0"))
   set_engine_par($ENGINE_PAR_DECAY, $DecKnob, 8, find_mod(8, "ENV_AHDSR_0"), find_target(8, 0, "ENV_AHDSR_0"))
   set_engine_par($ENGINE_PAR_DECAY, $DecKnob, 9, find_mod(9, "ENV_AHDSR_0"), find_target(9, 0, "ENV_AHDSR_0"))

   message("Nature Decay:" & $DecKnob)

   end on

on ui_control($SusKnob)

   set_engine_par($ENGINE_PAR_SUSTAIN, $SusKnob, 0, find_mod(0, "ENV_AHDSR_0"), find_target(0, 0, "ENV_AHDSR_0"))
   set_engine_par($ENGINE_PAR_SUSTAIN, $SusKnob, 1, find_mod(1, "ENV_AHDSR_0"), find_target(1, 0, "ENV_AHDSR_0"))
   set_engine_par($ENGINE_PAR_SUSTAIN, $SusKnob, 2, find_mod(2, "ENV_AHDSR_0"), find_target(2, 0, "ENV_AHDSR_0"))
   set_engine_par($ENGINE_PAR_SUSTAIN, $SusKnob, 3, find_mod(3, "ENV_AHDSR_0"), find_target(3, 0, "ENV_AHDSR_0"))
   set_engine_par($ENGINE_PAR_SUSTAIN, $SusKnob, 8, find_mod(8, "ENV_AHDSR_0"), find_target(8, 0, "ENV_AHDSR_0"))
   set_engine_par($ENGINE_PAR_SUSTAIN, $SusKnob, 9, find_mod(9, "ENV_AHDSR_0"), find_target(9, 0, "ENV_AHDSR_0"))

   message("Nature Sustain:" & $SusKnob)

	end on

on ui_control($RelKnob)

   set_engine_par($ENGINE_PAR_RELEASE, $RelKnob, 0, find_mod(0, "ENV_AHDSR_0"), find_target(0, 0, "ENV_AHDSR_0"))
   set_engine_par($ENGINE_PAR_RELEASE, $RelKnob, 1, find_mod(1, "ENV_AHDSR_0"), find_target(1, 0, "ENV_AHDSR_0"))
   set_engine_par($ENGINE_PAR_RELEASE, $RelKnob, 2, find_mod(2, "ENV_AHDSR_0"), find_target(2, 0, "ENV_AHDSR_0"))
   set_engine_par($ENGINE_PAR_RELEASE, $RelKnob, 3, find_mod(3, "ENV_AHDSR_0"), find_target(3, 0, "ENV_AHDSR_0"))
   set_engine_par($ENGINE_PAR_RELEASE, $RelKnob, 8, find_mod(8, "ENV_AHDSR_0"), find_target(8, 0, "ENV_AHDSR_0"))
   set_engine_par($ENGINE_PAR_RELEASE, $RelKnob, 9, find_mod(9, "ENV_AHDSR_0"), find_target(9, 0, "ENV_AHDSR_0"))

   message("Nature Release:" & $RelKnob)

	end on

on ui_control($EqLow)

	set_engine_par($ENGINE_PAR_GAIN1, $EqLow, -1, 2, $NI_BUS_OFFSET + 0)

	message($EqLow)

	end on

on ui_control($EqMid)
	
	set_engine_par($ENGINE_PAR_GAIN2, $EqMid, -1, 2, $NI_BUS_OFFSET + 0)

	message($EqMid)

	end on

on ui_control($EqHigh)

	set_engine_par($ENGINE_PAR_GAIN3, $EqHigh, -1, 2, $NI_BUS_OFFSET + 0)

	message($EqHigh)

	end on

on ui_control($LP)

	set_engine_par($ENGINE_PAR_CUTOFF, $LP, -1, 0, $NI_BUS_OFFSET + 0)

	message("LP:" & $LP)

	end on

on ui_control($HP)
	
	set_engine_par($ENGINE_PAR_CUTOFF, $HP, -1, 1, $NI_BUS_OFFSET + 0)

	message("HP:" & $HP)

	end on

on note

	disallow_group($ALL_GROUPS)

	if($GroupOneBypass = 0)

		allow_group(0)
	
		end if

	if($GroupTwoBypass = 0)

		allow_group(1)

		end if

	if($GroupThreeBypass = 0)

		allow_group(2)

		end if

	if($GroupFourBypass = 0 )

		allow_group(3)
	
		end if

	if($GroupFiveBypass = 0)
		
		allow_group(8) { -- fucked this up and you cant reorder groups, please kill me -- }

		end if

	if($GroupSixBypass = 0)

		allow_group(9)

		end if

	{ -- killswitch code -- }

    if ($EVENT_NOTE = 45)

        $KILLSWITCH_USED := 1

        set_engine_par($ENGINE_PAR_VOLUME, 0, 0, -1, -1)
        set_engine_par($ENGINE_PAR_VOLUME, 0, 1, -1, -1)

     	end if

	end on

on release
	
	{ -- code that sets group status apon note release, for use if killswitch was used at any point -- }

	if ($KILLSWITCH_USED = 1)
		
		set_engine_par($ENGINE_PAR_VOLUME, $GroupOneVol, 0, -1, -1)
		set_engine_par($ENGINE_PAR_VOLUME, $GroupTwoVol, 1, -1, -1)

		$KILLSWITCH_USED := 0
		
	end if

	end on
